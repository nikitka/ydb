name: Build (ya make)
description: Build targets
inputs:
  build_target:
    required: false
    description: "build target"
  build_preset:
    required: true
    default: "relwithdebinfo"
    description: "relwithdebinfo, release-asan, release-tsan"
  bazel_remote_uri:
    required: false
    description: "bazel-remote endpoint"
  bazel_remote_username:
    required: false
    description: "bazel-remote username"
  bazel_remote_password:
    required: false
    description: "bazel-remote password"
  link_threads:
    required: false
    default: "8"
    description: "link threads count"

runs:
  using: "composite"
  steps:
    - name: Init
      id: init
      shell: bash
      run: |
        echo "SHELLOPTS=xtrace" >> $GITHUB_ENV
        export TMP_DIR=$(pwd)/tmp_build
        echo "TMP_DIR=$TMP_DIR" >> $GITHUB_ENV
        rm -rf $TMP_DIR && mkdir $TMP_DIR
    
    - name: build
      id: build
      shell: bash
      run: |
        extra_params=()

        if [ ! -z "${{ inputs.build_target }}" ]; then
          extra_params+=(--target="${{ inputs.build_target }}")
        fi

        if [ ! -z "${{ inputs.bazel_remote_uri }}" ]; then
          extra_params+=(--bazel-remote-store)
          extra_params+=(--bazel-remote-base-uri "${{ inputs.bazel_remote_uri }}")
        fi
        
        if [ ! -z "${{ inputs.bazel_remote_username }}" ]; then
          extra_params+=(--bazel-remote-username "${{ inputs.bazel_remote_username }}")
          extra_params+=(--bazel-remote-password "${{ inputs.bazel_remote_password }}")
          extra_params+=(--bazel-remote-put --dist-cache-evict-bins --add-result .o --add-result .a)
        fi
        
        case "${{ inputs.build_preset }}" in
          debug)
            build_type=debug
            ;;
          relwithdebinfo)
            build_type=relwithdebinfo
            ;;
          release-asan)
            build_type=release
            extra_params+=(--sanitize="address")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-tsan)
            build_type=release
            extra_params+=(--sanitize="thread")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-msan)
            build_type=release
            extra_params+=(--sanitize="memory")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          *)
            echo "Invalid preset: ${{ inputs.build_preset }}"
            exit 1
            ;;
        esac
        
        echo "::debug::get version"
        ./ya --version
        
        platform_name=$(uname | tr '[:upper:]' '[:lower:]')-$(arch)
        echo "platform_name=$platform_name" >> $GITHUB_OUTPUT
        
        ./ya make -k --build "${build_type}" --force-build-depends -D'BUILD_LANGUAGES=CPP PY3 PY2 GO' -T --stat -DCONSISTENT_DEBUG \
          --log-file "$TMP_DIR/ya_log.txt" --evlog-file "$TMP_DIR/ya_evlog.jsonl" \
          --cache-size 512G --link-threads "${{ inputs.link_threads }}" \
          "${extra_params[@]}" || (
              RC=$?
              echo "::debug::ya make RC=$RC"
              echo "status=failed" >> $GITHUB_OUTPUT
          )

    - name: comment-if-build-failed
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      uses: actions/github-script@v6
      with:
        script: |
          // https://github.com/actions/toolkit/issues/1124
          const inputs =  ${{ toJSON(inputs) }};
          const steps =  ${{ toJSON(steps) }};
          
          const issue_number = context.issue.number;
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const logs_url = `${context.serverUrl}${owner}/${repo}/commit/${context.sha}/checks/${context.runId}/logs`;
          const preset = `${steps.build.outputs.platform_name}-${inputs.build_preset}`;
          const test_result_start_mark = '<!--test-status-->';
          
          
          core.info(`Checking existing comment for pr=${context.issue.number}, preset=${preset}`);
        
          const header = `<!-- status pr=${context.issue.number}, preset=${preset} -->`;
          
          let body = [header];
          
          if (steps.build.outputs.status == 'failed') {
            body.push(`:x: Build failed for **${preset}**. Please check [build logs](${logs_url}).`);
          } else {
            body.push(`Build passed for **${preset}**. Please wait for the test results..`);
          }

          body.push(`\n${test_result_start_mark}`);
          
          body = body.join("\n");
          
          const {data: comments} = await github.rest.issues.listComments({owner, repo, issue_number});
          
          const existing = comments.filter((c) => c.body.startsWith(header));
          
          if (existing.length > 0) {
            const comment = existing[existing.length - 1];
            core.info(`Rewrite comment ${comment.id}`);

            await github.rest.issues.updateComment({
                owner, repo,
                body,
                comment_id: comment.id,
            });
          } else {
            core.info(`Create new comment`);
            
            await github.rest.issues.createComment({owner, repo, issue_number, body});
          }


    - name: sync logs to s3
      if: always()
      shell: bash
      run: |
        echo "::group::s3-sync"
        s3cmd sync --acl-private --no-progress --stats --no-check-md5 "$TMP_DIR/" "$S3_BUCKET_PATH/build_logs/"
        echo "::endgroup::"

    - name: show free space
      if: always()
      shell: bash
      run: df -h
